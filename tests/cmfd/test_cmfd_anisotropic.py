import pytest
import pytest_timeout
import numpy as np
from scarabee import *

"""
Integration test for CMFD with anisotropic scattering
"""

class TestCMFDAnisotropic:

    # This problem should never take this long to run
    # if it takes longer, most likely didn't converge
    @pytest.mark.timeout(2000)
    def test_2by2_assembly_anisotropic(self):
        '''
        Test 2D anisotropic scattering problem
        '''
        Et = np.array([0.2513724154, 0.4567171155, 0.8845755162, 0.3973046554, 0.4791659643, 0.5819870050, 0.7001333971, ])
        Dtr = np.array([0.0830543478, 0.0478576146, 0.0065829473, 0.0065051058, 0.0064837279, 0.0064468767, 0.0063861614, ])
        Ea = np.array([0.0081122808, 0.0056341373, 0.4283818454, 0.0358548147, 0.1133550664, 0.2148040968, 0.3315986737, ])
        Ef = np.array([0.0093335853, 0.0009213907, 0.0115066386, 0.0211414145, 0.0817459584, 0.1609091306, 0.2506122179, ])
        vEf = np.array([0.0290494345, 0.0022510692, 0.0277658593, 0.0514659382, 0.198836585, 0.3909850617, 0.6089501373, ])
        chi = np.array([0.867473903, 0.1323932222, 0.0001328564, 1.59e-08, 2e-09, 3e-10, 2e-10, ])
        Es = np.array([ 
        [   
            [ 0.2235114751, 0.0197399240, 0.0000087347, 0.0000000008, 0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.4475770720, 0.0035059062, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.4338657370, 0.0223279338, 0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0000956446, 0.3513716574, 0.0099825387, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0021138302, 0.3581574294, 0.0055242827, 0.0000153556, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0145079047, 0.3261326773, 0.0265423263, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000494762, 0.0622074531, 0.3062777942, ],
        ],  
        [   
            [ 0.0830048745, 0.0000491606, 0.0000003127, 0.0000000001, 0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0488444709, -0.0009868563, -0.0000000000, -0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0120566577, -0.0054737104, 0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0000134174, 0.0085551072, -0.0020634189, -0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, -0.0000377295, 0.0078752892, -0.0013434119, -0.0000104199, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, -0.0019158256, 0.0136204969, -0.0052577946, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, -0.0000326355, -0.0077100864, 0.0141288833, ],
        ],  
        [     
            [ 0.0625085992, -0.0000972726, 0.0000000780, 0.0000000000, 0.0000000000, -0.0000000000, -0.0000000000, ],
            [ 0.0000000000, 0.0222358310, -0.0001015841, 0.0000000000, -0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0008579489, -0.0006308852, 0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0000012728, 0.0004309294, -0.0002782511, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, -0.0000787294, 0.0002679114, -0.0000667809, 0.0000044802, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, -0.0005844118, 0.0016802446, -0.0009379617, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000129499, -0.0025464287, 0.0027931902, ],
        ],  
        [     
            [ 0.0407236615, -0.0000619352, 0.0000000395, 0.0000000000, -0.0000000000, -0.0000000000, -0.0000000000, ],
            [ 0.0000000000, 0.0020305424, 0.0000082802, 0.0000000000, -0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0003335159, -0.0002648876, 0.0000000000, 0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, -0.0000002480, 0.0001600324, -0.0001129712, -0.0000000000, 0.0000000000, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, -0.0000479834, 0.0000939819, -0.0000350102, -0.0000009348, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, -0.0002098949, 0.0004609281, -0.0002486017, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, -0.0000019663, -0.0009897338, 0.0010080523, ],
        ],  ])
        UO2xs = CrossSection(Et, Dtr, Ea, Es, Ef, vEf, chi)

        Et = np.array([0.2345592777, 0.9419882335, 1.4933308485, 1.5444308275, 1.8128730119, 2.4696315539, 3.1616750801, ])
        Dtr = np.array([0.0815511572, 0.6019393615, 0.9368389174, 0.9470834583, 0.9754764867, 0.7533764914, 0.6833852479, ])
        Ea = np.array([0.0018316638, 1.36487e-05, 0.0010327827, 0.0029890923, 0.0064875101, 0.0128727873, 0.0188831709, ])
        Es = np.array([ 
        [     
            [ 0.1814736566, 0.0508360929, 0.0004174972, 0.0000003325, 0.0000000342, 0.0000000003, 0.0000000000, ],
            [ 0.0000000000, 0.7993895281, 0.1424523674, 0.0001124686, 0.0000162517, 0.0000024802, 0.0000014887, ],
            [ 0.0000000000, 0.0000000000, 0.8830421028, 0.5241462488, 0.0719377223, 0.0091956415, 0.0039763504, ],
            [ 0.0000000000, 0.0000000000, 0.0000385675, 0.9687386620, 0.4899953402, 0.0599394964, 0.0227296691, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0036806626, 1.3683758351, 0.3252681306, 0.1090608736, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000012, 0.1303219361, 1.7718863156, 0.5545505136, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000005, 0.0288474660, 0.6453718610, 2.4685725816, ],
        ],  
        [   
            [ 0.1023580787, 0.0214761580, 0.0000225467, 0.0000001202, 0.0000000243, 0.0000000003, 0.0000000000, ],
            [ 0.0000000000, 0.4718161149, 0.0632266718, 0.0000058732, 0.0000015639, 0.0000004436, 0.0000004854, ],
            [ 0.0000000000, 0.0000000000, 0.5942358871, 0.2932949869, 0.0132760176, 0.0005308042, 0.0001348051, ],
            [ 0.0000000000, 0.0000000000, 0.0000358559, 0.6553604165, 0.1855817189, 0.0031278380, -0.0000859903, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0025692924, 0.7425715110, 0.0350577867, -0.0057121328, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000003, 0.0323895342, 0.7086330687, -0.0060639214, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000001, 0.0000314446, 0.0478382551, 0.6237387370, ],
        ],  
        [    
            [ 0.0615722318, -0.0084282208, -0.0002067521, -0.0000000904, 0.0000000100, 0.0000000003, 0.0000000000, ],
            [ 0.0000000000, 0.2202229768, -0.0147634263, -0.0000556614, -0.0000077766, -0.0000010590, -0.0000004277, ],
            [ 0.0000000000, 0.0000000000, 0.3241392037, 0.0463830880, -0.0189516326, -0.0015188190, -0.0006198030, ],
            [ 0.0000000000, 0.0000000000, 0.0000316235, 0.3694215869, -0.0277678513, -0.0056023020, -0.0007904135, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0016218111, 0.2887490123, -0.0325885985, -0.0057277029, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, -0.0000000002, -0.0047632803, 0.2122522292, -0.0379250151, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, -0.0000000001, -0.0022122427, -0.0482206113, 0.1506528925, ],
        ],  
        [     
            [ 0.0204481118, -0.0160372902, -0.0000335987, -0.0000001183, -0.0000000016, 0.0000000002, 0.0000000000, ],
            [ 0.0000000000, 0.0360864272, -0.0352498482, -0.0000087192, -0.0000021986, -0.0000005344, -0.0000004324, ],
            [ 0.0000000000, 0.0000000000, 0.1189888502, -0.0838744595, -0.0101863002, -0.0003122488, -0.0000939159, ],
            [ 0.0000000000, 0.0000000000, 0.0000271373, 0.1430044836, -0.0626234964, -0.0010109363, -0.0000507259, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, 0.0008194844, 0.0828720800, -0.0156711116, -0.0006018815, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, -0.0000000002, -0.0082338328, 0.0611107492, -0.0145249903, ],
            [ 0.0000000000, 0.0000000000, 0.0000000000, -0.0000000000, -0.0006234973, -0.0295706302, 0.0439386925, ],
        ],  ])
        H2Oxs = CrossSection(Et, Dtr, Ea, Es)

        # Define Cells
        pitch = 1.26

        radii = [0.4,   0.475,  0.63]
        mats =  [UO2xs, UO2xs, H2Oxs, H2Oxs]
        U2 = PinCell(radii, mats, pitch, pitch)

        dx = [pitch]*17
        UO2 = Cartesian2D(dx, dx)
        UO2.set_tiles([U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,
                    U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2,U2])

        NW = 4 # Number of empty water cells in a pin cell
        dx = [pitch / NW] * NW
        WC = EmptyCell(H2Oxs, pitch / NW, pitch / NW)
        WT = Cartesian2D(dx, dx)
        WT.set_tiles([WC]*NW*NW)

        # Water assembly
        dx = [pitch]*17
        WAS = Cartesian2D(dx, dx)
        WAS.set_tiles([WT]*17*17)

        # Core assembly
        dx = [pitch*17, pitch*17]
        core = Cartesian2D(dx, dx)
        core.set_tiles([UO2, WAS,
                        WAS, WAS])
        
        dx_cmfd = [pitch]*17*2

        moc = MOCDriver(core, anisotropic = True)
        moc.x_max_bc = BoundaryCondition.Vacuum
        moc.y_min_bc = BoundaryCondition.Vacuum
        # Use 7->3 group condensation 
        moc.cmfd = CMFD(dx_cmfd, dx_cmfd, [[0,1],[2,4],[5,6]])
        moc.cmfd.damping = 0.6
        moc.cmfd.od_cmfd = False
        moc.cmfd.larsen_correction = True
        moc.generate_tracks(64, 0.05, YamamotoTabuchi6())

        moc.keff_tolerance = 1.E-5
        moc.flux_tolerance = 1.E-5
        moc.solve()

        assert moc.keff == pytest.approx(0.99372, 1E-5)